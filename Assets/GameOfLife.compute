//#pragma kernel Prepass
#pragma kernel CSInit
#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> _InitialImage;

bool _UseInitialImage;
uint _ColorsNumber;
float4 _Colors[256];
uint _Width;
uint _Height;
uint _Seed;
uint _Gap;
float2 flip;
float4 _WallColor;
float4 _EmptyColor;


float rand(float2 co)
{
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

/*

[numthreads(8, 8, 1)]
void Prepass(uint3 id : SV_DispatchThreadID)
{
if (id.x == 0 || id.y == 0 || id.x == _Resolution - 1 || id.y == _Resolution - 1)
{
Result[id.xy] = _WallColor;
}
else if (id.x % 2 == 0 || id.y % 2 == 0)
{
Result[id.xy] = _WallColor;
}
}
*/

int findIdByColor(float4 color) {
	int len = _ColorsNumber;
	for (int i = 0; i < len; i++) {
		if (distance(color, _Colors[i]) < 0.03) {
			return i;
		}
	}
	return -1;
}

float4 shouldBe(int x, int y) {
	/*
	if (rand(float2(x, y)) < 0.0001) {
	flip = float2(_Width, _Height) - float2(x,y);
	return float4(_InitialImage[flip].x, _InitialImage[flip].y, _InitialImage[flip].z, 1.0);
	}
	*/
	uint color = findIdByColor(Result[int2(x, y)]);
	if (color == 0) {
		color = _ColorsNumber;
	}
	for (int xi = -1; xi <= 1; xi++) {
		for (int yi = -1; yi <= 1; yi++) {
			if (xi == 0 && yi == 0)
				continue;
			uint id = findIdByColor(Result[int2(x + xi, y + yi)]);
			if (id == -1) {
				continue;
			}
			if (_Gap == -1) {
				if (id == color - 1) {
					return _Colors[color - 1];
				}
			}
			else {
				if (fmod(abs(id - color),_Gap) < 0.00001) {
					if (((abs(id - color) <= (_ColorsNumber / 2)) && (color < id)) ||
					((abs(id - color) > (_ColorsNumber / 2)) && (color > id))) {
					return _Colors[color - 1];
					}
				}
			}
		}
	}
	return Result[int2(x, y)];
}

[numthreads(8, 8, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
	if (!_UseInitialImage) {
		int rnd = (rand(id.xy) * _ColorsNumber);
		Result[id.xy] = _Colors[rnd];
	}
	else {
		flip = float2(_Width, _Height) - id.xy;
		Result[id.xy] = float4(_InitialImage[flip].x, _InitialImage[flip].y, _InitialImage[flip].z, 1.0);
	}
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = shouldBe(id.x, id.y);
	//Result[id.xy] = Result[id.xy];
	//Result[id.xy] = float4((float)id.x/_Width, (float)id.y / _Height, (float)id.x * id.y / (_Width * _Height), 1);
	//Result[id.xy] = float4(1, 1, 0, 1);
}

